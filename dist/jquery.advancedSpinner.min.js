!function(e,n,i,s){"use strict";const t=function(){this.count=0,this.message=s},r=function(n,i){this.$element=e(n),this.options=e.extend({},e.fn[pluginName].defaults,i),this._init()};r.prototype={_init:function(){this.processes={},"undefined"==typeof this.$container&&(this.$container=e('<div class="advancedSpinner"><div class="advancedSpinner-spinner"></div><ul class="advancedSpinner-messages"></ul></div>'),this.options.spinner instanceof e&&this.$container.find(".advancedSpinner-spinner").append(this.options.spinner),this.$element.append(this.$container)),this._debug("Initialization done")},isRunning:function(e){return"undefined"!=typeof this.processes[e]},isAnyProcessRunning:function(){return e.isEmptyObject(this.processes)},getProcesses:function(){return e.extend({},this.processes)},start:function(e,n){this.isRunning(e)||(this.processes[e]=new t),this.processes[e].count++,n&&(this.processes[e].message=n),this._trigger("started",e,this.processes[e]),this._refreshView()},finish:function(e,n){if(n=n||!1,this.isRunning(e)){do this.processes[e].count--,this._trigger("finished",e,this.processes[e]);while(n&&this.processes[e].count>0);this.processes[e].count<=0&&delete this.processes[e],this.isAnyProcessRunning()||this._trigger("finishedAll"),this._refreshView()}},finishAll:function(){var n=!1;e.each(this.processes,function(e){n=!0,this.finish(e,!0)}),n&&this._trigger("finishedAll")},destroy:function(){this.$element.removeData(dataKey),this.$container.remove(),delete this.$container,this._debug("Spinner has been destroyed")},_refreshView:function(){this.isAnyProcessRunning()?this._show():this._hide()},_show:function(){var n=this.$container.find(".advancedSpinner-messages");e.each(this.processes,function(i,s){var t=e("<li />");t.text(s.message),n.append}),this.$container.addClass("advancedSpinner-showed"),this.$container.removeClass("advancedSpinner-hidden"),this._debug("Spinner has been showed")},_hide:function(){this.$container.removeClass("advancedSpinner-showed"),this.$container.addClass("advancedSpinner-hidden"),this._debug("Spinner has been hidden")},_trigger:function(e,n){this.$element.trigger(this.options.eventPrefix+e,n),this._debug("Event %s is triggered",e,"Data:",n)},_debug:function(){if(this.options.debug){var e=Array.prototype.slice.call(arguments);"string"==typeof arguments[0]?e[0]="["+pluginName+"]: "+arguments[0]:e.unshift("["+pluginName+"]:"),console.log.apply(console,e)}}},e.fn[pluginName]=function(n){var i,t=Array.prototype.slice.call(arguments,1);return this.each(function(){var o=e(this).data(dataKey);if(o instanceof r==!1&&(o=new r(this,n),e(this).data(dataKey,o)),"string"==typeof n&&"_"!==n[0]&&"function"==typeof o[n]&&(i=o[n].apply(o,t),i!==s))return!1}),i!==s?i:this},e.fn[pluginName].defaults={freezeSize:!0,debug:!1,spinner:e("<div />"),eventPrefix:""}}(jQuery,window,document);
//# sourceMappingURL=jquery.advancedSpinner.min.js.map
