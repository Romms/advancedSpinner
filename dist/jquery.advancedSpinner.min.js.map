{"version":3,"sources":["main.js"],"names":["$","window","document","undefined","Process","this","count","message","Plugin","element","options","$element","extend","fn","pluginName","defaults","_init","prototype","processes","$container","spinner","find","append","_debug","isRunning","processName","isAnyProcessRunning","isEmptyObject","getProcesses","start","_trigger","_refreshView","finish","force","finishAll","hasStarted","each","destroy","removeData","dataKey","remove","_show","_hide","$messages","process","$li","text","addClass","removeClass","type","data","trigger","eventPrefix","debug","args","Array","slice","call","arguments","unshift","console","log","apply","result","restArgs","instance","freezeSize","jQuery"],"mappings":"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","file":"jquery.advancedSpinner.min.js","sourcesContent":["/*\n *  Project: advancedSpinner\n *  Description: Show spinner until all started processes will not be finished\n *  Author: Roman Shevchuk\n *  License: MIT\n */\n\n;(function( $, window, document, undefined ) {\n    \"use strict\";\n\n    const Process = function () {\n        this.count = 0;\n        this.message = undefined;\n    };\n\n    const Plugin = function (element, options) {\n        this.$element = $(element);\n        this.options = $.extend({}, $.fn[pluginName].defaults, options);\n        this._init();\n    };\n\n    Plugin.prototype = {\n        _init: function () {\n            this.processes = {};\n            if (typeof this.$container === 'undefined') {\n                this.$container = $(\n                    '<div class=\"advancedSpinner\">' +\n                        '<div class=\"advancedSpinner-spinner\"></div>' +\n                        '<ul class=\"advancedSpinner-messages\"></ul>' +\n                    '</div>'\n                );\n                if (this.options.spinner instanceof $) {\n                    this.$container.find('.advancedSpinner-spinner').append(this.options.spinner);\n                }\n                this.$element.append(this.$container);\n            }\n            this._debug('Initialization done');\n        },\n\n        isRunning: function (processName) {\n            return typeof this.processes[processName] !== \"undefined\";\n        },\n\n        isAnyProcessRunning: function () {\n           return $.isEmptyObject(this.processes);\n        },\n\n        getProcesses: function () {\n            return $.extend({}, this.processes);\n        },\n\n        start: function (processName, message) {\n            if (!this.isRunning(processName)) {\n                this.processes[processName] = new Process();\n            }\n\n            this.processes[processName].count++;\n            if (message) {\n                this.processes[processName].message = message;\n            }\n\n            // TODO: check access by link!!\n            // TODO: this._trigger('started', processName, Object.assign({}, this.processes[processName]));\n            this._trigger('started', processName, this.processes[processName]);\n            this._refreshView();\n        },\n\n        // TODO: give better name for \"force\"\n        finish: function (processName, force) {\n            force = force || false;\n            if (this.isRunning(processName)) {\n\n                do {\n                    this.processes[processName].count--;\n                    this._trigger('finished', processName, this.processes[processName]);\n                } while (force && this.processes[processName].count > 0);\n\n                if (this.processes[processName].count <= 0) {\n                    delete this.processes[processName];\n                }\n\n                if (!this.isAnyProcessRunning()) {\n                    this._trigger('finishedAll');\n                }\n\n                this._refreshView();\n            }\n        },\n\n        finishAll: function () {\n            var hasStarted = false;\n            $.each(this.processes, function (processName) {\n                hasStarted = true;\n                this.finish(processName, true);\n            });\n\n            if (hasStarted) {\n                this._trigger('finishedAll');\n            }\n        },\n\n        destroy: function() {\n            // TODO: move work with data from plugin's method\n            this.$element.removeData(dataKey);\n            this.$container.remove();\n            delete this.$container;\n            this._debug('Spinner has been destroyed');\n\n        },\n\n        _refreshView: function () {\n            if (this.isAnyProcessRunning()) {\n                this._show();\n            } else {\n                this._hide();\n            }\n        },\n\n        _show: function () {\n            // TODO: add showing messages\n            var $messages = this.$container.find('.advancedSpinner-messages');\n            $.each(this.processes, function (processName, process) {\n                var $li = $('<li />');\n                $li.text(process.message);\n                $messages.append\n            });\n            this.$container.addClass('advancedSpinner-showed');\n            this.$container.removeClass('advancedSpinner-hidden');\n            this._debug('Spinner has been showed');\n        },\n\n        _hide: function () {\n            this.$container.removeClass('advancedSpinner-showed');\n            this.$container.addClass('advancedSpinner-hidden');\n            this._debug('Spinner has been hidden');\n        },\n\n        _trigger: function(type, data) {\n            this.$element.trigger(this.options.eventPrefix + type, data);\n            this._debug('Event %s is triggered', type, 'Data:', data);\n        },\n\n        _debug: function() {\n            if (this.options.debug) {\n                var args = Array.prototype.slice.call(arguments);\n                if (typeof arguments[0] === 'string') {\n                    args[0] = '[' + pluginName + ']: ' + arguments[0];\n                } else {\n                    args.unshift('[' + pluginName + ']:');\n                }\n                console.log.apply(console, args);\n            }\n        }\n    };\n\n\n    $.fn[pluginName] = function(options) {\n        var result,\n            restArgs = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n            var instance = $(this).data(dataKey);\n\n            if (instance instanceof Plugin === false) {\n                instance = new Plugin(this, options);\n                $(this).data(dataKey, instance);\n            }\n\n            if (typeof options === \"string\" && // method name\n                options[0] !== \"_\" && // protect private methods\n                typeof instance[options] === \"function\") {\n\n                // invoke the method with the rest arguments\n                result = instance[options].apply( instance, restArgs );\n                if (result !== undefined) {\n                    return false; // break the $.fn.each() iteration\n                }\n            }\n        });\n\n        // if there is no return value,\n        // then return 'this' to enable chaining\n        return result !== undefined ? result : this;\n    };\n\n    $.fn[pluginName].defaults = {\n        freezeSize: true,\n        debug: false,\n        spinner: $('<div />'),\n        eventPrefix: ''\n    };\n\n}( jQuery, window, document ));"]}